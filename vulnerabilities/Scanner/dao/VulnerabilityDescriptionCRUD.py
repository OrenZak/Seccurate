import sqlite3
from VulnerabilityDescriptionObject import VulnerabilityDescriptionObject
"""
For configuration file:
    1. SQLDB = Vulns_Objects
    2. Path to prod db - C:\DB\VulnsDescription.db
"""
class VulnerabilityDescriptionCRUD(): # this class job is to CRUD vulnerbilities objects from/to the db
    __instance = None

    def __init__(self, db):
        """private constructor"""
        if VulnerabilityDescriptionCRUD.__instance != None:
            raise Exception("Unable to create new instance of a singleton class")
        else:
            VulnerabilityDescriptionCRUD.__instance = self
        self.__db = sqlite3.connect(db)
        print ("connected to DB")
        self.__cursor = self.__db.cursor()
        self.createTable()

    def createTable(self):
        """Creates the Vulns_Objects table if it doesn't exist"""

        self.__cursor.execute('CREATE TABLE IF NOT EXISTS Vulnerability_Types(vuln_id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT not null,\
                        severity INTEGER not null, description TEXT not null, recommendations TEXT not null)')
        self.__db.commit()

    def createVulnerabilityDescription(self, vuln):
        """
        :param payload: payload without id to be inserted to DB
        :return: payload with id after being inserted to DB
        """

        self.__cursor.execute("""insert into Vulnerability_Types(name,severity,description,recommendations) values(?,?,?,?)""", (vuln.getName(), vuln.getSeverity(), vuln.getDescription(), vuln.getRecommendations()))
        self.__db.commit()
        self.__cursor.execute("""select vuln_id from Vulnerability_Types order by vuln_id desc limit 1""")
        id = self.__cursor.fetchone()[0]
        vuln.setVulnID(id)
        self.__db.commit()
        return vuln


    def getVulns(self, size=10, page=0):
        """
        :param size: page size, default 10
        :param page: page number, default 0
        :return:  a list of VulnerabilitiesObjects items from Vulns_Objects DB from page #page of size size
        """
        self.__cursor.execute("""SELECT * from Vulnerability_Types ORDER BY vuln_id ASC LIMIT %d OFFSET %d""" % (size, page*size))
        vulns_list = []
        for vuln in self.__cursor.fetchall():
            vulnEntity = VulnerabilityDescriptionObject(vuln[0], vuln[1], vuln[2], vuln[3], vuln[4])
            vulns_list.append(vulnEntity)
        return vulns_list

    def getVulnByID(self, id):
        """
        :param id: VulnerabilitiesObject id
        :return: if id exists - returns VulnerabilitiesObject that is described by that id in the DB
        """
        self.__cursor.execute("""SELECT * from Vulnerability_Types where vuln_id = %d""" % id)
        item =self.__cursor.fetchone()
        if (item is None):
            raise Exception("No such payload with id %d" % id)
        return VulnerabilityDescriptionObject(item[0],item[1],item[2], item[3], item[4])

    def updateVuln(self,vuln):
        """
        :param payload: new payload with existing id
        :return: the new vuln successfully updated in VulnerabilitiesObjects format
        """

        if self.getVulnByID(vuln.getID()) is None:
            raise Exception("no such payload")
        self.__cursor.execute("""update Vulnerability_Types set name='%s', severity=%d, description='%s', recommendations='%s' where vuln_id=%d""" % (vuln.getName(), vuln.getSeverity(), vuln.getDescription(), vuln.getRecommendations(), vuln.getVulnID()))
        self.__db.commit()
        return vuln

    def deleteVulnByID(self, id):
        if self.getVulnByID(id) is None:
            raise Exception("no such vulnerability")
        self.__cursor.execute("""delete from Vulnerability_Types where vuln_id=%d""" % id)
        self.__db.commit()

    def deleteAllDataFromTable(self):
        self.__cursor.execute("""delete from Vulnerability_Types""")
        self.__cursor.execute("""delete from sqlite_sequence""")
        self.__db.commit()

    def dropTable(self):
        self.__cursor.execute("""DROP TABLE Vulnerability_Types""")
        self.__db.commit()

    def closeConnection(self):
        self.__db.close()
        print("disconnected from db")

    @staticmethod
    def getInstance(db):
        if (VulnerabilityDescriptionCRUD.__instance == None):
            VulnerabilityDescriptionCRUD(db)
        return VulnerabilityDescriptionCRUD.__instance


"""s = VulnerabilityDescriptionCRUD.getInstance()
ent1 = VulnerabilityDescriptionObject(name='name1', severity=1, description='abc', recommendations='aaa')

ent2 = VulnerabilityDescriptionObject(name='name2', severity=2, description='def', recommendations='bbb')

s.createVulnerabilityDescription(ent1)
s.createVulnerabilityDescription(ent2)

l= s.getVulns(1,1)
if (l != []):
    print(l[0].getVulnID())
s.deleteAllDataFromTable()
l= s.getVulns(1,0)
if (l != []):
    print(l[0].getRecommendations())

print(s.getVulnByID(2).getRecommendations())
s.closeConnection()"""