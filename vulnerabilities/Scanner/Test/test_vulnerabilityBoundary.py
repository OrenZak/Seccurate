from unittest import TestCase, TestSuite, TestLoader, TextTestRunner

from VulnerabilityBoundary import VulnerabilityBoundary
from VulnerabilityDescriptionObject import VulnerabilityDescriptionEntity
from VulnerabilitiesObjects import SimpleVulnerabilityEntity


class TestVulnerabilityBoundary(TestCase):

    @classmethod
    def setUpClass(cls):
        cls.vulnEntity = SimpleVulnerabilityEntity(id=1, name="rxss", url="http://test.com",
                                                   payload="<script>alert(1)<script>", requestB64="YmFzZTY0")
        cls.vulnDesciption = VulnerabilityDescriptionEntity(name="DDOS", severity="10",
                                                            description="DDOS attack can harm the availablity of the application",
                                                            recommendations="Implement Carbon Black EDR")
        cls.vulnBoundry = VulnerabilityBoundary(cls.vulnEntity, cls.vulnDesciption)

    @classmethod
    def tearDownClass(cls):
        None

    def test_convertToSimpleVulnerabilityEntity(self):
        simpleVuln = self.vulnBoundry.convertToSimpleVulnerabilityEntity()
        self.assertEqual(simpleVuln.getPayload(), self.vulnEntity.getPayload(),
                         "Converting To SimpleVulnerability is set with wrong payload")
        self.assertEqual(simpleVuln.getURL(), self.vulnEntity.getURL(),
                         "Converting To SimpleVulnerability is set with wrong URL")

    def test_convertToVulnerabilityDescriptionEntity(self):
        vulnDescription = self.vulnBoundry.convertToVulnerabilityDescriptionEntity()
        self.assertEqual(vulnDescription.getName(), self.vulnDesciption.getName(),
                         "Converting To VulnerabilityDescrption is set with wrong name")
        self.assertEqual(vulnDescription.getRecommendations(), self.vulnDesciption.getRecommendations(),
                         "Converting To VulnerabilityDescrption is set with wrong recommendations")

    def test_serialize(self):
        serializedVulnerability = self.vulnBoundry.serialize()
        self.assertIn('"_VulnerabilityBoundary__name": "DDOS"', serializedVulnerability,
                      "Missing Vulnerablity Name in Boundry")
        self.assertIn('"_VulnerabilityBoundary__payload": "<script>alert(1)<script>"', serializedVulnerability,
                      "Missing Vulnerablity payload in Boundry")


if __name__ == '__main__':
    suite = TestSuite()
    suite.addTest(TestLoader().loadTestsFromTestCase(TestVulnerabilityBoundary))
    TextTestRunner.run(suite)
